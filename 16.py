import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import os
import glob

def set_cell_vmerge(cell, merge_type):
    """合并单元格纵向"""
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()
    vMerge = OxmlElement('w:vMerge')
    vMerge.set(qn('w:val'), merge_type)
    tcPr.append(vMerge)

# 这里是你给的指标和序号（左3列）
left_rows = [
    (1, "负荷特征", "供电面积（km2）"),
    (2, "", "现状负荷（MW）"),
    (3, "", "现状负荷年平均峰谷差率（%）"),
    (4, "", "现状负荷结构（%）（居民电量：商业电量：工业电量：其他）"),
    (5, "", "现状用户规模（户）"),
    (6, "", "未来两年存量用户增长负荷（MW）"),
    (7, "", "未来两年新增用户接入负荷（MW）"),
    (8, "", "饱和负荷（MW）"),
    (9, "新能源特征", "现状分布式能源装机（MW）"),
    (10, "", "现状分布式能源渗透率（%）"),
    (11, "", "现状充电桩容量（MW）"),
    (12, "", "现状充电桩渗透率（%）"),
    (13, "", "未来两年新增分布式能源需求（MW）"),
    (14, "", "未来两年新增充电桩接入需求（MW）"),
    (15, "防灾特征", "防风等级"),
    (16, "", "防洪涝等级"),
    (17, "", "防冰雪等级"),
    (18, "", "防雷暴等级"),
    (19, "供电能力", "单辐射线路数量（条）"),
    (20, "", "不满足 N-1 的线路数量（条）"),
    (21, "", "中压线路大分支线（条）"),
    (22, "", "非站间联络线路数量（条）"),
    (23, "", "非标准网架线路数量（条）"),
    (24, "", "老旧中压线路长度（km）"),
    (25, "", "老旧中压开关数量（台）"),
    (26, "", "老旧及高耗能配变数量（台）"),
    (27, "", "线路智能化率（%）"),
    (28, "", "老旧 DTU 数量（个）"),
    (29, "", "配电自动化标准覆盖指数（%）"),
    (30, "抗灾能力", "灾害易发区域不满足要求的中压线路数(条)"),
    (31, "", "易受洪涝灾害影响区域地下配电站房数（台）"),
    (32, "运行水平", "供电可靠率ASAI-2（%）"),
    (33, "", "全口径电压合格率（%）"),
    (34, "", "电网设备综合利用率（%）"),
    (35, "", "同期线损达标率（%）"),
    (36, "", "95598万户故障工单数（个）"),
    (37, "", "线路年平均故障次数（次/条）"),
    (38, "", "配变年平均故障台次（次/台）"),
    (39, "", "户均停电次数（次/户）"),
    (40, "", "中低压线路缺陷数（处）"),
    (41, "", "中低压线路隐患数（处）"),
    (42, "", "电能质量不达标台区数量（台）"),
    (43, "负荷承载力", "中压公线数量（条）"),
    (44, "", "中压专线数量（条）"),
    (45, "", "公变容量（MVA）"),
    (46, "", "专变容量（MVA）"),
    (47, "", "负荷较重的上级主变数量（台）"),
    (48, "", "重过载中压线路数量（条）"),
    (49, "", "重过载配变数量（台）"),
    (50, "", "负荷较重中压线路数量（条）"),
    (51, "", "负荷较重配变数量（台）"),
    (52, "新能源承载力", "分布式电源倒送线路数量（条）"),
    (53, "", "分布式电源倒送配变数量（台）"),
    (54, "", "分布式电源接入受限线路数量（条）"),
    (55, "", "分布式电源接入受限配变数量（台）"),
    (56, "", "充电桩接入受限台区数量（台）"),
    (57, "调节能力", "负荷智能调节能力（MW）"),
]

# 下面写一个指标名到Excel列名的映射，需要你根据你提供的Excel列名对应关系自行调整
excel_field_map = {
    "供电面积（km2）": "供电面积",
    "现状负荷（MW）": "现状负荷",
    "现状负荷年平均峰谷差率（%）": "现状负荷年平均峰谷差率",
    "现状负荷结构（%）（居民电量：商业电量：工业电量：其他）": "现状负荷结构（居民用电量:商业用电量:工业用电量:其他用电量）",
    "现状用户规模（户）": "现状低压用户规模",
    "未来两年存量用户增长负荷（MW）": "存量用户未来两年增长负荷",
    "未来两年新增用户接入负荷（MW）": "新增用户未来两年增长容量",
    "饱和负荷（MW）": "饱和负荷",
    "现状分布式能源装机（MW）": "现状分布式能源装机",
    "现状分布式能源渗透率（%）": "现状分布式能源渗透率",
    "现状充电桩容量（MW）": "现状充电桩容量",
    "现状充电桩渗透率（%）": "现状充电桩渗透率",
    "未来两年新增分布式能源需求（MW）": "未来两年新增分布式能源需求",
    "未来两年新增充电桩接入需求（MW）": "未来两年新增充电桩接入需求",
    "防风等级": "防风等级",
    "防洪涝等级": "防洪涝等级",
    "防冰雪等级": "防冰雪等级",
    "防雷暴等级": "防雷暴等级",
    "单辐射线路数量（条）": "单辐射线路数量",
    "不满足 N-1 的线路数量（条）": "不满足N-1的线路数量",
    "中压线路大分支线（条）": "中压线路大分支线",
    "非站间联络线路数量（条）": "非站间联络线路数量",
    "非标准网架线路数量（条）": "非标准网架线路数量",
    "老旧中压线路长度（km）": "老旧中压线路长度",
    "老旧中压开关数量（台）": "老旧中压开关数量",
    "老旧及高耗能配变数量（台）": "老旧及高耗能配变数量",
    "线路智能化率（%）": "线路智能化率",
    "老旧 DTU 数量（个）": "老旧 DTU 数量",
    "配电自动化标准覆盖指数（%）": "配电自动化标准覆盖指数",
    "灾害易发区域不满足要求的中压线路数(条)": "灾害易发区域不满足要求的中压线路数",
    "易受洪涝灾害影响区域地下配电站房数（台）": "易受洪涝灾害影响区域地下配电站房数",
    "供电可靠率ASAI-2（%）": "供电可靠率RS-3",
    "全口径电压合格率（%）": "全口径电压合格率",
    "电网设备综合利用率（%）": "电网设备综合利用率",
    "同期线损达标率（%）": "同期线损达标率",
    "95598万户故障工单数（个）": "95598万户故障工单数",
    "线路年平均故障次数（次/条）": "线路年平均故障次数",
    "配变年平均故障台次（次/台）": "配变年平均故障台次",
    "户均停电次数（次/户）": "低压用户年平均故障次数",
    "中低压线路缺陷数（处）": "中低压线路缺陷数",
    "中低压线路隐患数（处）": "中低压线路隐患数",
    "电能质量不达标台区数量（台）": "电能质量不达标台区数量",
    "中压公线数量（条）": "中压公用线路数量",
    "中压专线数量（条）": "中压专用线路数量",
    "公变容量（MVA）": "配变公变容量",
    "专变容量（MVA）": "配变专变容量",
    "负荷较重的上级主变数量（台）": "负荷较重的上级主变数量",
    "重过载中压线路数量（条）": "重过载中压线路数量",
    "重过载配变数量（台）": "重过载配变数量",
    "负荷较重中压线路数量（条）": "负荷较重中压线路数量",
    "负荷较重配变数量（台）": "负荷较重配变数量",
    "分布式电源倒送线路数量（条）": "分布式电源倒送线路数量",
    "分布式电源倒送配变数量（台）": "分布式电源倒送配变数量",
    "分布式电源接入受限线路数量（条）": "分布式电源接入受限线路数量",
    "分布式电源接入受限配变数量（台）": "分布式电源接入受限配变数量",
    "充电桩接入受限台区数量（台）": "充电桩接入受限台区数量",
    "负荷智能调节能力（MW）": "负荷智能调节能力",
}

# 读取多个年份的Excel文件合并数据
data_folder = "data/16"
years = list(range(2024, 2031))

# 存储所有年份数据，结构 {grid_name: {year: row}}
grid_year_data = {}

for year in years:
    file_path = os.path.join(data_folder, f"{year}.xlsx")
    if not os.path.exists(file_path):
        print(f"{file_path} 不存在，跳过")
        continue
    df = pd.read_excel(file_path)
    # 遍历每行数据，根据“网格名称”分组存储
    for _, row in df.iterrows():
        grid = row.get('网格名称')
        if grid is None:
            continue
        if grid not in grid_year_data:
            grid_year_data[grid] = {}
        grid_year_data[grid][year] = row

# 生成Word文件
output_dir = "data_16"
os.makedirs(output_dir, exist_ok=True)

for grid_name, year_rows in grid_year_data.items():
    doc = Document()
    doc.add_heading(f"表16  {grid_name}网格属性提升表", level=1)
    table = doc.add_table(rows=len(left_rows)+1, cols=3+len(years))
    table.style = "Table Grid"

    # 设置表头
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = "序号"
    hdr_cells[1].text = "属性名称"
    hdr_cells[2].text = "属性参数"
    for i, year in enumerate(years):
        hdr_cells[3+i].text = f"{year}年"

    # 填充左侧固定三列
    for i, (idx, attr_name, attr_param) in enumerate(left_rows):
        row_cells = table.rows[i+1].cells
        row_cells[0].text = str(idx)
        row_cells[1].text = attr_name
        row_cells[2].text = attr_param

        # 填充年份数据
        for j, year in enumerate(years):
            val = ""
            if year in year_rows:
                row_data = year_rows[year]
                # Excel列名对应指标名
                key = excel_field_map.get(attr_param)
                if key and key in row_data:
                    val = row_data[key]
                # 如果是缺失值或nan，设为空字符串
                if pd.isna(val):
                    val = ""
            row_cells[3 + j].text = str(val)

    safe_name = grid_name.replace('/', '_').replace('\\', '_').replace(' ', '_')
    doc.save(os.path.join(output_dir, f"{safe_name}.docx"))
    print(f"已生成 {safe_name}.docx")